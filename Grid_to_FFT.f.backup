!**********************************************************
! This program takes a uniform 3-D grid and performs the  *
! various transforms on the matrix for the different      *
! processes within the model.                             *
!                                                         *
! Grid-Space: Column models.  Divide the grid by latitude *
!   and longitude, but keep all Z for each lat/lon        *
!   together.                                             *
! FFT: Divide the grid by Z and latitude, but keep all    *
!   longitude (m) for each Z / lat pair on a single       *
!   processor                                             *
! Legendre: Divide the grid by Z and longitude (m), but   *
!   keep all latitudes (n) for each Z / lon pair on a     *
!   single processor                                      *
!**********************************************************

!      Subroutine Grid_Transform(Buffer, Num_Procs_Col)
      Subroutine Grid_to_FFT(Grid_Array, FFT_Array)

!----------------------------------------------------------
! Purpose:
!    Perform transformation from Grid space to FFT space

! Revision History:
!   Aug 2015 Matthew Turner: Created.  Need to adapt
!                            for thinned grids.
!----------------------------------------------------------

! Module files:
      Use Grid_Config

      Implicit None

! Include Files
      Include 'mpif.h'

! Passed variables:
      Real( 8 ), Intent(In) :: Grid_Array(:,:,:)  ! Input array in Grid space
      Real( 8 ) :: FFT_Array(:,:,:)  ! output array in FFT space

! Local variables:
      Integer, Allocatable :: MPI_Ind(:)   ! Array of rank numbers
                                           !   for MPI communication
      Real( 8 ), Allocatable :: Buffer(:,:,:)
      Integer :: i, proc, count   ! counter
      Integer :: Astat     ! Allocation status
      Character(80) :: Msg   ! Error message
      Character(16) :: ProcessName = 'Grid_to_FFT'
      Real( 8 ), Allocatable :: temp_array(:,:,:)

      Integer :: status, mpi_err

!-------------------------------- Code Begins -----------------------------

      Allocate(MPI_Ind(Num_Procs_Col), Stat = Astat)
      If ( Astat /= 0 ) Then
         Msg = 'Error allocating MPI_Ind in '
         Write(*,*) Msg, ProcessName, Rank 
         Write(*,*) Msg, ProcessName, Rank 
         Write(*,*) Msg, ProcessName, Rank 
         Call Exit(1)
      End If

      Allocate(Temp_Array(End_lat(Rank)-Start_lat(Rank)+1,
     &                    End_lon(Rank)-Start_lon(Rank)+1,
     &                    Z), Stat = Astat)
      If ( Astat /= 0 ) Then
         Msg = 'Error allocating Temp_Array in '
         Write(*,*) Msg, ProcessName, Rank
         Write(*,*) Msg, ProcessName, Rank
         Write(*,*) Msg, ProcessName, Rank
         Call Exit(1)
      End If

      Do i = 1, Num_Procs_Col
         MPI_Ind(i) = Num_Procs_Col * (Rank / Num_Procs_Col) + i - 1
      End Do

      ! Loop through MPI_Id and send / receive
      temp_array(:,:,:) = grid_array(:,:,:)
      Do i = 1, Num_Procs_Col
         If ( Rank == MPI_Ind(i) ) Then
            Do proc = 1, Num_Procs_Col 
               count =  (End_lat(Rank)-Start_lat(Rank)+1) * 
     &                  (End_lon(Rank)-Start_lon(Rank)+1) * 
     &                  (End_Z(MPI_Ind(proc))-Start_Z(MPI_Ind(proc))+1)
               If ( Rank /= MPI_Ind(proc) ) Then
                  Allocate(Buffer(End_lat(Rank)-Start_lat(Rank)+1,
     &                   End_lon(Rank)-Start_lon(Rank)+1,
     &                   End_Z(MPI_Ind(proc))-Start_Z(MPI_Ind(proc))+1),
     &                   Stat = Astat)
                  If ( Astat /= 0 ) Then
                     Msg = 'Error allocating Buffer in '
                     Write(*,*) Msg, ProcessName, Rank
                     Write(*,*) Msg, ProcessName, Rank
                     Write(*,*) Msg, ProcessName, Rank
                     Call Exit(1)
                  End If
                  Buffer = Temp_Array(:,:,Start_Z(MPI_Ind(proc)):
     &                                    End_Z(MPI_Ind(proc)))
                  Call MPI_SEND(Buffer, count, MPI_DOUBLE,
     &                       MPI_Ind(proc), 0, MPI_COMM_WORLD, mpi_err)
                  Deallocate(Buffer)
               End If
            End Do
            Do proc = Start_lon(Rank), End_lon(Rank)
               FFT_Array(:,proc,:) =
     &             Temp_Array(:,proc-Start_lon(MPI_Ind(i))+1,
     &                        Start_Z(Rank):End_Z(Rank))
            End Do
         Else
            count =  (End_lat(Rank)-Start_lat(Rank)+1) * 
     &               (End_lon(MPI_Ind(i))-Start_lon(MPI_Ind(i))+1)
     &             * (End_Z(Rank)-Start_Z(Rank)+1)
            Allocate(Buffer(End_lat(Rank)-Start_lat(Rank)+1,
     &               End_lon(MPI_Ind(i))-Start_lon(MPI_Ind(i))+1,
     &               End_Z(Rank)-Start_Z(Rank)+1),
     &               Stat = Astat)
            If ( Astat /= 0 ) Then
               Msg = 'Error allocating Buffer in '
               Write(*,*) Msg, ProcessName, Rank
               Write(*,*) Msg, ProcessName, Rank
               Write(*,*) Msg, ProcessName, Rank
               Call Exit(1)
            End If
            Call MPI_RECV(Buffer, count, MPI_DOUBLE,
     &                   MPI_Ind(i), 0, MPI_COMM_WORLD, status, mpi_err)
            Do proc = Start_lon(MPI_Ind(i)), End_lon(MPI_Ind(i))
               FFT_Array(:,proc,:) = Buffer(:,proc-
     &                               Start_lon(MPI_Ind(i))+1,:)
            End Do
            Deallocate(Buffer)
         End If
      End Do

      If ( rank == 0  ) then
         write(*,*) 'Rank FFT = ', Rank
         write(*,*) 'fft = '
         do i = 1, End_lat(Rank)-Start_lat(Rank)+1
         write(*,*) FFT_Array(i,:,:)
         end do
      end if

      End Subroutine Grid_to_FFT




