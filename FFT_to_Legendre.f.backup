!**********************************************************
! This program takes a uniform 3-D grid and performs the  *
! various transforms on the matrix for the different      *
! processes within the model.                             *
!                                                         *
! Grid-Space: Column models.  Divide the grid by latitude *
!   and longitude, but keep all Z for each lat/lon        *
!   together.                                             *
! FFT: Divide the grid by Z and latitude, but keep all    *
!   longitude (m) for each Z / lat pair on a single       *
!   processor                                             *
! Legendre: Divide the grid by Z and longitude (m), but   *
!   keep all latitudes (n) for each Z / lon pair on a     *
!   single processor                                      *
!**********************************************************

      Subroutine FFT_to_Legendre(FFT_Array, Legendre_Array)

!----------------------------------------------------------
! Purpose:
!    Perform transformation from FFT space to Legendre space

! Revision History:
!   Aug 2015 Matthew Turner: Created.  Need to adapt
!                            for thinned grids.
!----------------------------------------------------------

! Module files:
      Use Grid_Config  ! Grid configuration variables

      Implicit None

! Include Files
      Include 'mpif.h'

! Passed variables:
      ! Input array in FFT space
      Real( 8 ), Intent(In) :: FFT_Array(:,:,:)  
      ! output array in Legendre space
      Real( 8 ), Intent(InOut) :: Legendre_Array(:,:,:)  

! Local variables:
      ! Allocatables
      Integer, Allocatable :: MPI_Ind(:)   ! Array of rank numbers
                                           !   for MPI communication
      Real( 8 ), Allocatable :: Buffer(:,:,:)
      Real( 8 ), Allocatable :: temp_array(:,:,:)

      Integer :: i, proc     ! counter
      Integer :: count       ! number of bytes for MPI_Send
      Integer :: Astat       ! Allocation status
      Integer :: status, mpi_err
      Character(80) :: Msg   ! Error message
      Character(16) :: ProcessName = 'FFT_to_Legen'

!-------------------------------- Code Begins -----------------------------

      Allocate(MPI_Ind(Num_Procs_Row), Stat = Astat)
      If ( Astat /= 0 ) Then
         Msg = 'Error allocating MPI_Ind in '
         Write(*,*) Msg, ProcessName, Rank 
         Write(*,*) Msg, ProcessName, Rank 
         Write(*,*) Msg, ProcessName, Rank 
         Call Exit(1)
      End If

      Allocate(Temp_Array(End_lat(Rank)-Start_Lat(Rank)+1,
     &                    lon, End_Z(Rank)-Start_Z(Rank)+1)
     &                    , Stat = Astat)
      If ( Astat /= 0 ) Then
         Msg = 'Error allocating Temp_Array in '
         Write(*,*) Msg, ProcessName, Rank
         Write(*,*) Msg, ProcessName, Rank
         Write(*,*) Msg, ProcessName, Rank
         Call Exit(1)
      End If

      ! Determine the processor Ranks that this processor will
      ! communicate with
      Do i = 1, Num_Procs_Row
         MPI_Ind(i) = Mod((Rank),Num_Procs_Col) + Num_Procs_Col *
     &                (i - 1)
      End Do

      temp_array(:,:,:) = FFT_array(:,:,:)
      ! Loop through MPI_Id and send / receive
      Do i = 1, Num_Procs_Row
         ! Define starting and ending lat/lon/z for the sending process
         Start_lat_send = Start_lat(MPI_Ind(i))
         End_lat_send = End_lat(MPI_Ind(i))
         Start_lon_send = Start_lon(MPI_Ind(i))
         End_lon_send = End_lon(MPI_Ind(i))
         Start_Z_send = Start_Z(MPI_Ind(i))
         End_Z_send = End_Z(MPI_Ind(i))

         ! Check if this process is the indexed process (MPI_Ind(i)).
         ! If so, send a snippet of the FFT-space array to the other
         ! processors within MPI_Ind.
         ! If not, receive a snippet of the FFT-space array from the
         ! indexed process.
         If ( Rank == MPI_Ind(i) ) Then
            ! Loop through the receiving processors and send the data
            Do proc = 1, Num_Procs_Row
               ! Calculate the starting and ending z of the receiving
               ! process
               Start_Z_recv = Start_Z(MPI_Ind(proc))
               End_Z_recv = End_Z(MPI_Ind(proc))

               ! Calculate the number of bytes to send (for MPI_SEND)
               count =  (End_lat(Rank)-Start_lat(Rank)+1) *
     &               (End_leg(MPI_Ind(proc))-Start_leg(MPI_Ind(proc))+1)
     &             * (End_Z(Rank)-Start_Z(Rank)+1)

               ! If the receiving processor Rank is not the rank of this
               ! processor
               If ( Rank /= MPI_Ind(proc) ) Then
                  ! Allocate the Buffer array for the data to be sent
                  Allocate(Buffer(End_lat(Rank)-Start_lat(Rank)+1,
     &                   End_leg(MPI_Ind(proc))-Start_leg(MPI_Ind(proc))+1,
     &        End_Z(Rank)-Start_Z(Rank)+1),
     &                   Stat = Astat)
                  If ( Astat /= 0 ) Then
                     Msg = 'Error allocating Buffer in '
                     Write(*,*) Msg, ProcessName, Rank
                     Write(*,*) Msg, ProcessName, Rank
                     Write(*,*) Msg, ProcessName, Rank
                     Call Exit(1)
                  End If
                  Buffer = Temp_Array(:,Start_leg(MPI_Ind(proc)):
     &                                End_leg(MPI_Ind(proc)),:)
                  Call MPI_SEND(Buffer, count, MPI_DOUBLE,
     &                       MPI_Ind(proc), 0, MPI_COMM_WORLD, mpi_err)
                  Deallocate(Buffer)
               End If
            End Do
            Do proc = Start_lat(Rank), End_lat(Rank)
               Legendre_Array(proc,:,:) = Temp_Array(proc - 
     &                                Start_lat(MPI_Ind(i))+1,
     &                                Start_leg(Rank):End_leg(Rank),:)
            End Do
         Else
            count =  (End_lat(MPI_Ind(i))-Start_lat(MPI_Ind(i))+1) *
     &               (End_leg(Rank)-Start_leg(Rank)+1)
     &             * (End_Z(Rank)-Start_Z(Rank)+1)
            Allocate(Buffer(End_lat(MPI_Ind(i))-Start_lat(MPI_Ind(i))+1,
     &               End_leg(Rank)-Start_leg(Rank)+1,
     &               (End_Z(Rank)-Start_Z(Rank)+1)),
     &               Stat = Astat)
            If ( Astat /= 0 ) Then
               Msg = 'Error allocating Buffer in '
               Write(*,*) Msg, ProcessName, Rank
               Write(*,*) Msg, ProcessName, Rank
               Write(*,*) Msg, ProcessName, Rank
               Call Exit(1)
            End If
            Call MPI_RECV(Buffer, count, MPI_DOUBLE,
     &                   MPI_Ind(i), 0, MPI_COMM_WORLD, status, mpi_err)
            Do proc = Start_lat(MPI_Ind(i)), End_lat(MPI_Ind(i))
               Legendre_Array(proc,:,:) = Buffer(proc-
     &                               Start_lat(MPI_Ind(i))+1,:,:)
            End Do
            Deallocate(Buffer)
         End If
      End Do

      If ( rank == 0 ) then
         write(*,*) 'Rank legendre = ', Rank
         write(*,*) 'legendre(:,:,1) = '
         do i=1, lat
            write(*,*) Legendre_Array(i,:,1)
         end do
      end if

      End Subroutine FFT_to_Legendre




